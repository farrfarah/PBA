# -*- coding: utf-8 -*-
"""fasttext

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B30BUFkyeNkxoISNkcp-IM0IvbvsgXcG
"""

import torch
from torch import nn

class fastText(nn.Module):
    def __init__(
        self,
        n_classes: int,
        vocab_size: int,
        embeddings: torch.Tensor,
        emb_size: int,
        fine_tune: bool,
        hidden_size: int
    ) -> None:
        super(fastText, self).__init__()

        # embedding layer
        self.embeddings = nn.Embedding(vocab_size, emb_size)
        self.set_embeddings(embeddings, fine_tune)

        # hidden layer
        self.hidden = nn.Linear(emb_size, hidden_size)

        # output layer
        self.fc = nn.Linear(hidden_size, n_classes)

    def set_embeddings(self, embeddings: torch.Tensor, fine_tune: bool = True) -> None:
        """
        Set weights for embedding layer
        """
        if embeddings is None:
            self.embeddings.weight.data.uniform_(-0.1, 0.1)
        else:
            self.embeddings.weight = nn.Parameter(embeddings, requires_grad=fine_tune)

    def forward(self, text: torch.Tensor, words_per_sentence: torch.Tensor) -> torch.Tensor:
        # word embedding
        embeddings = self.embeddings(text)

        # average word embeddings to get sentence representation
        avg_embeddings = embeddings.mean(dim=1).squeeze(1)

        # hidden layer
        hidden = self.hidden(avg_embeddings)

        # output layer
        scores = self.fc(hidden)

        return scores